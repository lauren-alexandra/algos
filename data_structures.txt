Data Structures

- Coding is manipulating data to accomplish something.
- Data structures are a way to organize and manage data. 
- A data structure is a collection of data values, the 
relationships among them, and the functions or operations 
that can be applied to the data. 

Complexity Analysis 

- a problem can have multiple solutions, but some are better than others
- the bedrock of coding interviews
- time complexity
	- measure of how fast an algorithm runs
- space complexity 
	- how much memory or space an algorithm uses up 
- referred together as space-time complexity
- different data structures are going to have different
time and space complexity ramifications

Memory

- why is space important? memory is not unlimited. 
- comprised of bits, 0s and 1s. 8 bits = byte.
- byte e.g. 0000 0001 
- this is (2^7 2^6 2^5 2^4  2^3 2^2 2^1 2^0) binary number format (base-2 format)
- 256 possible values in a byte
- how to store more than value 256? increase the number of bits
that are stored in a data value. for 16- or 32- or 64-bit 
architecture 
- can point to another memory address from current memory address.
this is a pointer.
- a list of items needs to be stored back-to-back in memory slots
that must be free

Big O Notation

Time complexity: measuring the change in speed of the algorithm with respect to the size of the input. 
Asymptotic analysis: study the behavior of a function f(n) as the value n moves towards infinity. 

Best to worst complexity (given the worst-case scenario): 
O(1) Constant Time. Meaning N/space is irrelevant to performance.
O(log(N))
O(N) Linear Time Complexity. As size of N input increases, the speed of the algorithm increases linearly. Every single element traversed through.
O(2N) = O(N) 
O(N log(N)) 
O(N^2).    Every single element traversed through twice. 
O(N^3).
O(N^4 + N^2) = O(N^4) 
O(2^N) 
O(N!) // N factorial 

note: if have two inputs: O(N + M) for example. 


