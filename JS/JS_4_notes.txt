Execution Contexts

manage the complexity of interpreting and running code
Contexts get placed on the execution stack


This keyword
Allows use to reuse functions with different contexts 
Note: if this keyword is not bound, it will default to window
Implicit Binding
Left of the . dot at call time to see what the this keyword references
person.sayHello(); 
Explicit Binding
Call, apply, bind

E.g. Call a function in the context of a given object 

Function sayHello() {
	console.log(“Hello, “ + this.name);
}

Var bob= {
	Name: ‘Bob’,
	Age: 20
}

sayHello.call(bob); // the this keyword in sayHello() func will reference bob

E.g. Apply 

Var languages = [l1, l2, l3]; 
sayHello.apply(bob, languages);  // allows you to pass in an array of arguments.


E.g. Bind
// is the same as call but instead of immediately invoking the function it will return a new 
// function that you can invoke later

Var newFunc = sayHello.bind(bob, l1, l2, l3);  	// also like Call can pass in arguments 



Async JavaScript - Callbacks, Promises, Async/Await

Callbacks: 
When you have a function that accepts another function as an argument, the 
function is a higher order function and the argument is a callback. 

e.g. 
function myHigherOrderFunc(callback) {
	return callback(); 
} 

or 

[1, 2, 3].map((i) => i + 5) // with map being the higher order function and the 
anonymous function being the callback. 


Promises:
// The promise object takes a callback as an arugment 
// When resolve() invoked, status of promise becomes fulfilled
// When reject() invoked, status of promise becomes rejected

e.g.
const promise = new Promise((resolve, reject) => {
	setTimeout(() => { 
		resolve()
	}, 2000) 
}); 

function onSuccess() {
	console.log('Success');
}

function onError() {
	console.log('Error');
}

promise.then(onSuccess); 	// this should be called
promise.catch(onError); 	// if the promise instead invoked reject(), this would log


Async/Await:
// the benefit? we can write asynchronous code as if it were synchronous

$('#myButton').on('click', async () => {
	const userData = await getUserData('jill')

	updateUI(userData); 
}); 














