WHY PYTHON

- language created in the late 1980s by Guido Van Rossum
- Python 2 reaches it's end of life in 2020
- Python 3 is latest
- it's open source language

- Python has varied applications:
	- AI/ML: SciPi, NumPy...
	- Hardware & Micro-controllers: Raspberry Pi
	- Web Development: Django, Flask
	- Scripting: Dev Ops Configuration scripts

- Python has fully featured standard library
- Python has the PyPI Package Index for 3rd party packages

- PEP8 is a Python coding standard

ANATOMY OF A PYTHON PROGRAM

- """ for multi-line comments. Include info about program at the top of the file
- # for single line comments
- import requests library // use to make API calls


BASIC DATA TYPES

VARIABLES AND TYPES

- variables can not start with a number
- names are lower case and separated by underscores my_variable
- long names ok 

- Open a Python REPL (read evaluate print loop) with ctrl shift P 
- close the REPL with ctrl ' (single quote)

- assign values on right hand side of = 
- Since Python is a dynamic language, we don't need to declare the type of variables
before we store data in them.

- can do a type check with type()
- in Python, the "Null" type is None 


NUMBERS

- int e.g. 3, -23442, 0
- float e.g. 3.2, -9.8, 0. 
- complex e.g. 42j 

- Python also provides a decimal library which has benefits over the float datatype


BOOLEANS

- True is 1
- False is 0 


STRINGS

- 'hello'
- "hello"
- strings can be concatenated with + operator
- to use a ' within a '' use a \' to escape the quote. don't need if single ' within ""
- multi-line strings can be represented between """ but the whitespace will be 
a part of the string e.g. 

hello = """
	Hi everyone!
	Welcome to the show!
	"""

- strings can be printed using the print() function in Python. 
- In Python 3.7+ you can use f-strings for string formatting. e.g. 

name = 'Tanya'
hello = f'Hello, {name}' 
print(hello)
// Hello, Tanya 


FUNCTIONS

ANATOMY OF A FUNCTION

- def hello(): 
	return 'Hello' // optional. If a func does not have a return statement, it returns None

- Python knows what code is related by how it's indented. Indent with Tab

- calling functions e.g. hello(), add2(5) 

- store a returned value like
new_number = add_numbers(3, 5) 
new_number 

FUNCTIONAL ARGUMENTS

- arguments that have default values are called keyword arguments and can be overriden 
when needed
e.g. 
def hello(say='hi'): 
	print(f'{say}') 

hello()
# hi
hello('helloooo')
# helloooo

- arguments without defaults are required


























