Pillars of OOP

- Encapsulation: hide details about our code. Access modifiers like public/private give 
explicit control of our encapsulation. The key to good software design.

- Inheritance: the ability to reuse code across similar classes.

- Polymorphism: allows us to have objects of the same type that behave differently.


Inheritance

- Allows you to define a base class.
- Any members of a base class can be inherited by a derived class.
- e.g. 
public class Book : NamedObject

Polymorphism

- An abstract class can be used as a base class. Derived classes can use 
different implementations of class methods.  

e.g.

public abstract class BookBase
{
	public abstract void AddGrade(double grade); 
}

public class Book : BookBase 
{}

// because Book derives from BookBase, the Book class must implement an AddGrade method

// in Book class:

// use override keyword so C# compiler knows we will override what is in abstract BookBase class
// note: you can only override abstract and virtual methods.
// must use same return type: void
// must use same parameters: double grade 
public override void AddGrade(double grade) {} 

Encapsulation

- An Interface is like a class but it contains no implementation details. No methods.
It will only describe the members that will be available on a specific type.


e.g. 

public interface IBook {
	void AddGrade(double grade);
	Statistics GetStatistics();
	string Name { get; }
	event GradeAddedDelegate GradeAdded; 
} 


// this class must implement all members of IBook. members can be abstract. 
public class Book : NamedObject, IBook 
{}




