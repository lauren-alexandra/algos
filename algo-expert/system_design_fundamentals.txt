Client--Server Model

The paradigm by which modern systems are designed, which consists of clients requesting
data or service from servers and servers providing data or service to clients.

Client

A machine or process that requests data or service from a server. 
Note: a single machine or piece of software can be both a client and a server at the same
time. For instance, a single machine could act as a server for end users and as a client
for a database.

Server

A machine or process that provides data or service for a client, usually by listening for
incoming network calls. 
Note: a single machine or piece of software can be both a client and a server at the same time.
For instance, a single machine could act as a server for end users and as a client
for a database.

IP Address

An address given to each machine connected to the public internet. IPv4 addresses consist 
of four numbers separated by dots: a.b.c.d where all four numbers are between 0 and 255.

Special values include:
- 127.0.0.1: your local machine / localhost
- 192.168.x.y: your private network. For instance, your machine and all machines on your
private wifi network will usually have the 192.168 prefix. 

DNS 

Domain Name System: it describes the entities and protocols involved in the translation
from domain names to IP addresses. Typically machines make a DNS query to a well known
entity which is responsible for returning the IP address (or multiple ones) of the 
requested domain name in the response. 
A DNS query is made when you enter www.google.com in a browser. 


What are load balancers? 

Client		Load Balancer		Server

Balancing: rerouting traffic from clients so it doesn't go directly to one server but
to many load balancers. 

Load Balancer: a type of reverse proxy that distributes traffic across servers. Load 
balancers can be found in many parts of a system from the DNS layer all the way to the
database layer. 

Reverse Proxy: a server that sits between clients and servers and acts on behalf of the 
servers, typically used for logging, load balancing, or caching. 

Server-selection strategy: A strategy for how a load balancer chooses servers when 
distributing traffic amongst multiple servers. e.g. random selection, performance-based
selection (choose the server with the best peformance like fastest response time or 
least amount of traffic), and IP-based routing.

Hot Spot: Some servers will receive more traffic than others, creating a "hot spot."

Nginx: "engine X" is a webserver that is often used as a reverse proxy and load balancer.



Caching 

Latency: the time it takes for a certain operation to complete in a system. A measure
of time - duration in milliseconds or seconds. 

Throughput: the number of operations that a system can handle properly per time unit. 
Can be measured in requests per second (RPS).

Memory: short for Random Access Memory RAM. Data stored in memory will be lost when the 
process that has written that data dies. 

Cache: a piece of hardware or software that stores data typically meant to retrieve that
data faster than otherwise. 

Cache Hit: when requested data is found in a cache. 

Cache Miss: When requested data could have been found in a cache but isn't. e.g. If a server
goes down, a load balancer will have to forward requests to a new server, which results
in a cache miss.

Cache Eviction Policy: The policy by which values get evicted or removed from a cache. 
LRU - least-recently used
FIFO - first in first out
LFU - least-frequently used 

Content Delivery Network (CDN):
A third-party service like Cloudfare or Google Cloud CDN that acts like a cache for your
servers. A CDN has servers all around the world, meaning that the latency to a CDN's servers 
will almost always be better than the latency to your servers. A CDN's servers are often
referred to as PoPs (Points of Presence). 


Proxies

Reverse Proxy:
A server that sits between clients and servers and acts on behalf of the servers,
typically used for logging, load balancing, or caching. 

Forward Proxy:
A server that sits between a client and servers and acts on behalf of the client, typically
used to mask the client's identity (IP address). Often just referred to as proxies. 

Nginx:
"engine X" is a webserver that is often used as a load balancer or reverse proxy. 


Hashing

Hashing Function:
A function that takes in a specific data type (such as a string or an identifier) and outputs
a number. Different inputs may have the same output, but a good hashing function attempts to
minimize those hashing collisions. 

Consistent Hashing:
A type of hashing that minimizes the number of keys that need to be remapped when a hash
table gets resized. It's often used by load balancers to distribute traffic to servers; 
it minimizes the number of requests that get forwarded to different servers when new
servers are added or when existing servers are brought down. 

Rendezvous Hashing:
A type of hashing also coined highest random weight hashing. Allows for minimal re-distribution
of mappings when a server goes down.

SHA:
Short for "Secure Hash Algorithms" the SHA is a collection of cryptographic hash functions
used in the industry. 



Relational Databases

Databases:
Are programs that use disk or memory to record data and query data. In general, they are
themselves servers that are long lived and interact with the rest of your application
through network calls, with protocols on top of TCP or even HTTP. 

For the most part, databases need to persist records and thus cannot use memory. You
have to write data to your disk. 


Disk: 
Refers to HDD (hard-disk drive) or SSD (solid-state drive). Data written to disk will
persist through power failures and general machine crashes. 

Disk is referred to as non-volatile storage. 


Relational Database: 
a type of structured db (SQL db)

Non-relational: NoSQL

SQL: 
structured query language. relational databases can be used using a derivative of SQL 
such as PostgreSQL in the case of Postgres. 
 
Postgres:
a relational database that uses a dialect of SQL called PostgreSQL. Provides ACID transactions.

ACID transaction: 
Atomicity: 
the transaction operations will all success or all fail. 

Consistency:
the transaction cannot bring the database to an invalid state. 
after a transaction is committed or rolled back, the rules for each record will still apply,
and all future transactions will see the effect of the transaction. This is Strong Consistency.

Isolation:
the execution of multiple transactions concurrently will have the same effect as if they
had been executed sequentially. 

Durability: 
any committed transaction is written to non-volatile storage. so it won't be overwritten by power-loss
or a crash.


Database Index: a special data structure that allows your db to perform certain queries faster like reads,
but writes to db take longer. 

Eventual Consistency:
reads of db might return a view of the system that is stale. which could be 10 seconds or minutes.
