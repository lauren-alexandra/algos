Types

Most of the values in JavaScript can behave
like an object but that does not make them objects.
This is not true: "everything is an object."

Primitive Types
- undefined
- string
- number
- boolean
- object 
- symbol (es6). used to create pseudo-private keys on objects.
Symbol(); 

Variables do not have types. Values do.

typeof null // returns "object" 
// this is a historical bug in JS. should return "null"


Emptiness 
undefined vs undeclared vs uninitialized (temporal dead zone - TDZ)

TDZ
Certain variables like block scope ones never get initialized as undefined.

Undefined
Variable has been initialized but not defined.

Undeclared
Variable has never been created. 

Special Values:
NaN and isNan

NaN "not a number" 
Means value is an invalid number.

In JS,
NaN !== NaN

NaN does not have the identity property, i.e. it is not equal to itself.
So, you need to use Number.isNaN() to check.

instead of 

var myAge = Number("age"); // NaN 
myAge === NaN // this will return false 

so use

Number.isNaN(myAge) // true 


Negative Zero (-0)

In JS, -0 is valid. It also does weird stuff.

To check for it:

var myNegZero = -0;
Object.is(myNegZero, -0); // true 


Fundamental Objects (Built-In Objects)

Use the new keyword for these: 

Object()
Array()
Function()
Date()		// e.g. new Date(); 
RegExp()
Error() 

Do not use the new keyword for these:

String()	// e.g. String(myVariable) 
Number()
Boolean()


Coercion 

Abstract Operations
They are the fundamental building block of how we deal with type conversion ("coercion").

ToPrimitive(hint)  
// takes a function, array, etc. and turns into primitive value
// accepts a "type hint" where you tell the func what type you would like the value to be converted to
// whatever value you provide will be run through one or both functions:
valueOf() and toString()


ToString()
// takes any value and gives the representation of that value in String form

ToNumber()
// takes a value, returns a number. e.g. 
ToNumber("") // 0 

ToBoolean() 
// is the value falsy or truthy? 
Falsy
"" 
0, -0
null
NaN
false
undefined

Everything else is "truthy", will return true.





































